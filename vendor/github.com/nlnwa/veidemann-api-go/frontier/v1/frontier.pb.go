// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frontier/v1/frontier.proto

package frontier

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/nlnwa/veidemann-api-go/commons/v1"
	v1 "github.com/nlnwa/veidemann-api-go/config/v1"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrawlSeedRequest struct {
	JobExecutionId       string           `protobuf:"bytes,1,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	Job                  *v1.ConfigObject `protobuf:"bytes,5,opt,name=job,proto3" json:"job,omitempty"`
	Seed                 *v1.ConfigObject `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CrawlSeedRequest) Reset()         { *m = CrawlSeedRequest{} }
func (m *CrawlSeedRequest) String() string { return proto.CompactTextString(m) }
func (*CrawlSeedRequest) ProtoMessage()    {}
func (*CrawlSeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22980166e1ae15d8, []int{0}
}

func (m *CrawlSeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlSeedRequest.Unmarshal(m, b)
}
func (m *CrawlSeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlSeedRequest.Marshal(b, m, deterministic)
}
func (m *CrawlSeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlSeedRequest.Merge(m, src)
}
func (m *CrawlSeedRequest) XXX_Size() int {
	return xxx_messageInfo_CrawlSeedRequest.Size(m)
}
func (m *CrawlSeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlSeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlSeedRequest proto.InternalMessageInfo

func (m *CrawlSeedRequest) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

func (m *CrawlSeedRequest) GetJob() *v1.ConfigObject {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *CrawlSeedRequest) GetSeed() *v1.ConfigObject {
	if m != nil {
		return m.Seed
	}
	return nil
}

// The execution id for a seed crawl
type CrawlExecutionId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlExecutionId) Reset()         { *m = CrawlExecutionId{} }
func (m *CrawlExecutionId) String() string { return proto.CompactTextString(m) }
func (*CrawlExecutionId) ProtoMessage()    {}
func (*CrawlExecutionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_22980166e1ae15d8, []int{1}
}

func (m *CrawlExecutionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlExecutionId.Unmarshal(m, b)
}
func (m *CrawlExecutionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlExecutionId.Marshal(b, m, deterministic)
}
func (m *CrawlExecutionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlExecutionId.Merge(m, src)
}
func (m *CrawlExecutionId) XXX_Size() int {
	return xxx_messageInfo_CrawlExecutionId.Size(m)
}
func (m *CrawlExecutionId) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlExecutionId.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlExecutionId proto.InternalMessageInfo

func (m *CrawlExecutionId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Message sent from Harvester to request a new page to fetch and also used to return the harvest result.
// First message should set requestNextPage to true to tell frontier to respond with a page to fetch.
// When the fetch is done, a stream of PageHarvest objects are returned:
// The first object contains metrics.
// Subsequent objects contain outlinks until all outlinks are sent.
// Finally the client should complete the request.
type PageHarvest struct {
	// Types that are valid to be assigned to Msg:
	//	*PageHarvest_RequestNextPage
	//	*PageHarvest_Metrics_
	//	*PageHarvest_Outlink
	//	*PageHarvest_Error
	Msg                  isPageHarvest_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PageHarvest) Reset()         { *m = PageHarvest{} }
func (m *PageHarvest) String() string { return proto.CompactTextString(m) }
func (*PageHarvest) ProtoMessage()    {}
func (*PageHarvest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22980166e1ae15d8, []int{2}
}

func (m *PageHarvest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageHarvest.Unmarshal(m, b)
}
func (m *PageHarvest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageHarvest.Marshal(b, m, deterministic)
}
func (m *PageHarvest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageHarvest.Merge(m, src)
}
func (m *PageHarvest) XXX_Size() int {
	return xxx_messageInfo_PageHarvest.Size(m)
}
func (m *PageHarvest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageHarvest.DiscardUnknown(m)
}

var xxx_messageInfo_PageHarvest proto.InternalMessageInfo

type isPageHarvest_Msg interface {
	isPageHarvest_Msg()
}

type PageHarvest_RequestNextPage struct {
	RequestNextPage bool `protobuf:"varint,1,opt,name=requestNextPage,proto3,oneof"`
}

type PageHarvest_Metrics_ struct {
	Metrics *PageHarvest_Metrics `protobuf:"bytes,2,opt,name=metrics,proto3,oneof"`
}

type PageHarvest_Outlink struct {
	Outlink *QueuedUri `protobuf:"bytes,3,opt,name=outlink,proto3,oneof"`
}

type PageHarvest_Error struct {
	Error *v11.Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*PageHarvest_RequestNextPage) isPageHarvest_Msg() {}

func (*PageHarvest_Metrics_) isPageHarvest_Msg() {}

func (*PageHarvest_Outlink) isPageHarvest_Msg() {}

func (*PageHarvest_Error) isPageHarvest_Msg() {}

func (m *PageHarvest) GetMsg() isPageHarvest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PageHarvest) GetRequestNextPage() bool {
	if x, ok := m.GetMsg().(*PageHarvest_RequestNextPage); ok {
		return x.RequestNextPage
	}
	return false
}

func (m *PageHarvest) GetMetrics() *PageHarvest_Metrics {
	if x, ok := m.GetMsg().(*PageHarvest_Metrics_); ok {
		return x.Metrics
	}
	return nil
}

func (m *PageHarvest) GetOutlink() *QueuedUri {
	if x, ok := m.GetMsg().(*PageHarvest_Outlink); ok {
		return x.Outlink
	}
	return nil
}

func (m *PageHarvest) GetError() *v11.Error {
	if x, ok := m.GetMsg().(*PageHarvest_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PageHarvest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PageHarvest_RequestNextPage)(nil),
		(*PageHarvest_Metrics_)(nil),
		(*PageHarvest_Outlink)(nil),
		(*PageHarvest_Error)(nil),
	}
}

type PageHarvest_Metrics struct {
	// The number of uri's downloaded. The requested uri + embedded resources
	UriCount int32 `protobuf:"varint,1,opt,name=uri_count,json=uriCount,proto3" json:"uri_count,omitempty"`
	// Byte count for the resources downloaded. Includes embedded resources
	BytesDownloaded      int64    `protobuf:"varint,2,opt,name=bytes_downloaded,json=bytesDownloaded,proto3" json:"bytes_downloaded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageHarvest_Metrics) Reset()         { *m = PageHarvest_Metrics{} }
func (m *PageHarvest_Metrics) String() string { return proto.CompactTextString(m) }
func (*PageHarvest_Metrics) ProtoMessage()    {}
func (*PageHarvest_Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_22980166e1ae15d8, []int{2, 0}
}

func (m *PageHarvest_Metrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageHarvest_Metrics.Unmarshal(m, b)
}
func (m *PageHarvest_Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageHarvest_Metrics.Marshal(b, m, deterministic)
}
func (m *PageHarvest_Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageHarvest_Metrics.Merge(m, src)
}
func (m *PageHarvest_Metrics) XXX_Size() int {
	return xxx_messageInfo_PageHarvest_Metrics.Size(m)
}
func (m *PageHarvest_Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_PageHarvest_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_PageHarvest_Metrics proto.InternalMessageInfo

func (m *PageHarvest_Metrics) GetUriCount() int32 {
	if m != nil {
		return m.UriCount
	}
	return 0
}

func (m *PageHarvest_Metrics) GetBytesDownloaded() int64 {
	if m != nil {
		return m.BytesDownloaded
	}
	return 0
}

// A specification of the page to fetch.
type PageHarvestSpec struct {
	// The URI to fetch
	QueuedUri *QueuedUri `protobuf:"bytes,1,opt,name=queued_uri,json=queuedUri,proto3" json:"queued_uri,omitempty"`
	// The configuration for the fetch
	CrawlConfig          *v1.ConfigObject `protobuf:"bytes,2,opt,name=crawl_config,json=crawlConfig,proto3" json:"crawl_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PageHarvestSpec) Reset()         { *m = PageHarvestSpec{} }
func (m *PageHarvestSpec) String() string { return proto.CompactTextString(m) }
func (*PageHarvestSpec) ProtoMessage()    {}
func (*PageHarvestSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_22980166e1ae15d8, []int{3}
}

func (m *PageHarvestSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageHarvestSpec.Unmarshal(m, b)
}
func (m *PageHarvestSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageHarvestSpec.Marshal(b, m, deterministic)
}
func (m *PageHarvestSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageHarvestSpec.Merge(m, src)
}
func (m *PageHarvestSpec) XXX_Size() int {
	return xxx_messageInfo_PageHarvestSpec.Size(m)
}
func (m *PageHarvestSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PageHarvestSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PageHarvestSpec proto.InternalMessageInfo

func (m *PageHarvestSpec) GetQueuedUri() *QueuedUri {
	if m != nil {
		return m.QueuedUri
	}
	return nil
}

func (m *PageHarvestSpec) GetCrawlConfig() *v1.ConfigObject {
	if m != nil {
		return m.CrawlConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*CrawlSeedRequest)(nil), "veidemann.api.frontier.v1.CrawlSeedRequest")
	proto.RegisterType((*CrawlExecutionId)(nil), "veidemann.api.frontier.v1.CrawlExecutionId")
	proto.RegisterType((*PageHarvest)(nil), "veidemann.api.frontier.v1.PageHarvest")
	proto.RegisterType((*PageHarvest_Metrics)(nil), "veidemann.api.frontier.v1.PageHarvest.Metrics")
	proto.RegisterType((*PageHarvestSpec)(nil), "veidemann.api.frontier.v1.PageHarvestSpec")
}

func init() { proto.RegisterFile("frontier/v1/frontier.proto", fileDescriptor_22980166e1ae15d8) }

var fileDescriptor_22980166e1ae15d8 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0xa6, 0x6d, 0x26, 0xa8, 0x89, 0xf6, 0xe4, 0xba, 0x07, 0x2a, 0xf3, 0xa3, 0x50,
	0xd4, 0x0d, 0x29, 0x12, 0x15, 0xe2, 0x82, 0x12, 0x0a, 0x01, 0x09, 0x68, 0x1d, 0x71, 0xe1, 0x62,
	0xf9, 0x67, 0x6a, 0x36, 0x24, 0xbb, 0xc9, 0xfa, 0x27, 0xe5, 0x6d, 0x78, 0x04, 0x9e, 0x07, 0xf1,
	0x30, 0x68, 0xd7, 0x71, 0x30, 0x81, 0x96, 0x70, 0x1b, 0xcf, 0xcc, 0x37, 0xf3, 0xcd, 0xcc, 0xe7,
	0x05, 0xeb, 0x52, 0x0a, 0x9e, 0x30, 0x94, 0xdd, 0xac, 0xd7, 0x2d, 0x6c, 0x3a, 0x93, 0x22, 0x11,
	0x64, 0x3f, 0x43, 0x16, 0xe2, 0xd4, 0xe3, 0x9c, 0x7a, 0x33, 0x46, 0x57, 0xd1, 0xac, 0x67, 0x59,
	0x81, 0x98, 0x4e, 0x05, 0x8f, 0x15, 0x4a, 0x62, 0x2c, 0x52, 0x19, 0x60, 0x9c, 0xc3, 0xac, 0xfd,
	0x40, 0xf0, 0x4b, 0x16, 0xfd, 0x2d, 0x74, 0x50, 0xee, 0xb6, 0x16, 0xb4, 0xbf, 0x19, 0xd0, 0x1e,
	0x48, 0x6f, 0x31, 0x19, 0x21, 0x86, 0x0e, 0xce, 0x53, 0x8c, 0x13, 0xd2, 0x81, 0xf6, 0x58, 0xf8,
	0x2e, 0x5e, 0x61, 0x90, 0x26, 0x4c, 0x70, 0x97, 0x85, 0xa6, 0x71, 0x68, 0x74, 0x1a, 0xce, 0xde,
	0x58, 0xf8, 0x67, 0x85, 0xfb, 0x75, 0x48, 0x4e, 0xa1, 0x36, 0x16, 0xbe, 0x59, 0x3f, 0x34, 0x3a,
	0xcd, 0x93, 0x7b, 0xf4, 0x77, 0xee, 0x39, 0x25, 0x9a, 0xf5, 0xe8, 0x40, 0x5b, 0xef, 0xfd, 0x31,
	0x06, 0x89, 0xa3, 0x10, 0xe4, 0x29, 0x6c, 0xc5, 0x88, 0xa1, 0xb9, 0xfd, 0x3f, 0x48, 0x0d, 0xb1,
	0xed, 0x25, 0xe3, 0x32, 0x8f, 0x3d, 0xa8, 0xae, 0x38, 0x56, 0x59, 0x68, 0x7f, 0xaf, 0x42, 0xf3,
	0xdc, 0x8b, 0x70, 0xe8, 0xc9, 0x4c, 0x4d, 0x74, 0x04, 0x2d, 0x99, 0x0f, 0xf7, 0x0e, 0xaf, 0x12,
	0x15, 0xd1, 0xc9, 0xbb, 0xc3, 0x8a, 0xb3, 0x1e, 0x20, 0x6f, 0x60, 0x67, 0x8a, 0x89, 0x64, 0x41,
	0x6c, 0x56, 0x35, 0x3b, 0x4a, 0xaf, 0xbd, 0x09, 0x2d, 0x35, 0xa1, 0x6f, 0x73, 0xd4, 0xb0, 0xe2,
	0x14, 0x05, 0xc8, 0x73, 0xd8, 0x11, 0x69, 0x32, 0x61, 0xfc, 0xb3, 0x59, 0xd3, 0xb5, 0xee, 0xde,
	0x50, 0xeb, 0x22, 0xc5, 0x14, 0xc3, 0x0f, 0x92, 0xa9, 0x0a, 0x4b, 0x18, 0x39, 0x85, 0x3a, 0x4a,
	0x29, 0xa4, 0xb9, 0xa5, 0xf1, 0xb7, 0xff, 0xd8, 0x94, 0x96, 0x84, 0x82, 0x9f, 0xa9, 0xb4, 0x61,
	0xc5, 0xc9, 0xf3, 0xad, 0x0b, 0xd8, 0x59, 0x12, 0x22, 0x07, 0xd0, 0x48, 0x25, 0x73, 0x03, 0x91,
	0xf2, 0x44, 0xcf, 0x5d, 0x77, 0x76, 0x53, 0xc9, 0x06, 0xea, 0x9b, 0x3c, 0x80, 0xb6, 0xff, 0x25,
	0xc1, 0xd8, 0x0d, 0xc5, 0x82, 0x4f, 0x84, 0x17, 0x62, 0xa8, 0xe7, 0xae, 0x39, 0x2d, 0xed, 0x7f,
	0xb1, 0x72, 0xf7, 0xeb, 0x50, 0x9b, 0xc6, 0x91, 0xfd, 0xd5, 0x80, 0x56, 0x69, 0xee, 0xd1, 0x0c,
	0x03, 0x32, 0x00, 0x98, 0x6b, 0xfa, 0x6e, 0x2a, 0x99, 0xee, 0xb1, 0xe1, 0xac, 0x4e, 0x63, 0x5e,
	0x98, 0x64, 0x08, 0xb7, 0x02, 0x75, 0x59, 0x37, 0xbf, 0xff, 0x72, 0xfd, 0x1b, 0x8a, 0xa3, 0xa9,
	0xa1, 0xb9, 0xeb, 0xe4, 0x87, 0x01, 0xbb, 0x2f, 0x97, 0xed, 0x48, 0x04, 0x8d, 0x95, 0xc4, 0xc9,
	0xc3, 0x1b, 0x48, 0xad, 0xff, 0x08, 0xd6, 0x3f, 0x93, 0x4b, 0x1a, 0xb4, 0x2b, 0x24, 0x82, 0xe6,
	0x2b, 0xfc, 0x25, 0xa4, 0xfb, 0x9b, 0xe9, 0xc6, 0x3a, 0xda, 0x2c, 0x4f, 0xed, 0xd9, 0xae, 0x74,
	0x8c, 0x47, 0x46, 0x7f, 0x06, 0x77, 0xb8, 0xa0, 0xdc, 0xa7, 0x9c, 0x7b, 0xd7, 0x83, 0xfb, 0xad,
	0x62, 0x05, 0x23, 0x94, 0x19, 0x0b, 0xf0, 0xdc, 0xf8, 0xf8, 0x24, 0x62, 0xc9, 0xa7, 0xd4, 0x57,
	0xba, 0xe9, 0xf2, 0x09, 0x5f, 0x78, 0xdd, 0x15, 0xfc, 0xd8, 0x9b, 0xb1, 0xe3, 0x48, 0x74, 0x4b,
	0xcf, 0xc5, 0xb3, 0xc2, 0xf6, 0xb7, 0xf5, 0x73, 0xf1, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x49, 0x0c, 0xe4, 0x37, 0xbb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontierClient is the client API for Frontier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontierClient interface {
	CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionId, error)
	// Request a URI from the Frontiers queue
	// Used by a Harvester to fetch a new page
	GetNextPage(ctx context.Context, opts ...grpc.CallOption) (Frontier_GetNextPageClient, error)
}

type frontierClient struct {
	cc *grpc.ClientConn
}

func NewFrontierClient(cc *grpc.ClientConn) FrontierClient {
	return &frontierClient{cc}
}

func (c *frontierClient) CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionId, error) {
	out := new(CrawlExecutionId)
	err := c.cc.Invoke(ctx, "/veidemann.api.frontier.v1.Frontier/CrawlSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierClient) GetNextPage(ctx context.Context, opts ...grpc.CallOption) (Frontier_GetNextPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Frontier_serviceDesc.Streams[0], "/veidemann.api.frontier.v1.Frontier/GetNextPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontierGetNextPageClient{stream}
	return x, nil
}

type Frontier_GetNextPageClient interface {
	Send(*PageHarvest) error
	Recv() (*PageHarvestSpec, error)
	grpc.ClientStream
}

type frontierGetNextPageClient struct {
	grpc.ClientStream
}

func (x *frontierGetNextPageClient) Send(m *PageHarvest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontierGetNextPageClient) Recv() (*PageHarvestSpec, error) {
	m := new(PageHarvestSpec)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontierServer is the server API for Frontier service.
type FrontierServer interface {
	CrawlSeed(context.Context, *CrawlSeedRequest) (*CrawlExecutionId, error)
	// Request a URI from the Frontiers queue
	// Used by a Harvester to fetch a new page
	GetNextPage(Frontier_GetNextPageServer) error
}

func RegisterFrontierServer(s *grpc.Server, srv FrontierServer) {
	s.RegisterService(&_Frontier_serviceDesc, srv)
}

func _Frontier_CrawlSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).CrawlSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.frontier.v1.Frontier/CrawlSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).CrawlSeed(ctx, req.(*CrawlSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontier_GetNextPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontierServer).GetNextPage(&frontierGetNextPageServer{stream})
}

type Frontier_GetNextPageServer interface {
	Send(*PageHarvestSpec) error
	Recv() (*PageHarvest, error)
	grpc.ServerStream
}

type frontierGetNextPageServer struct {
	grpc.ServerStream
}

func (x *frontierGetNextPageServer) Send(m *PageHarvestSpec) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontierGetNextPageServer) Recv() (*PageHarvest, error) {
	m := new(PageHarvest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Frontier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.frontier.v1.Frontier",
	HandlerType: (*FrontierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlSeed",
			Handler:    _Frontier_CrawlSeed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNextPage",
			Handler:       _Frontier_GetNextPage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "frontier/v1/frontier.proto",
}
